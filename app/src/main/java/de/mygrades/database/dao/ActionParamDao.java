package de.mygrades.database.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.mygrades.database.dao.ActionParam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTION_PARAM".
*/
public class ActionParamDao extends AbstractDao<ActionParam, Long> {

    public static final String TABLENAME = "ACTION_PARAM";

    /**
     * Properties of entity ActionParam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ActionId = new Property(1, Integer.class, "actionId", false, "ACTION_ID");
        public final static Property Key = new Property(2, String.class, "key", false, "KEY");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property ActionParamId = new Property(5, long.class, "actionParamId", false, "ACTION_PARAM_ID");
    };

    private Query<ActionParam> action_ActionParamsQuery;

    public ActionParamDao(DaoConfig config) {
        super(config);
    }
    
    public ActionParamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTION_PARAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACTION_ID\" INTEGER," + // 1: actionId
                "\"KEY\" TEXT NOT NULL ," + // 2: key
                "\"VALUE\" TEXT," + // 3: value
                "\"TYPE\" TEXT," + // 4: type
                "\"ACTION_PARAM_ID\" INTEGER NOT NULL UNIQUE );"); // 5: actionParamId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTION_PARAM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ActionParam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer actionId = entity.getActionId();
        if (actionId != null) {
            stmt.bindLong(2, actionId);
        }
        stmt.bindString(3, entity.getKey());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
        stmt.bindLong(6, entity.getActionParamId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ActionParam readEntity(Cursor cursor, int offset) {
        ActionParam entity = new ActionParam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // actionId
            cursor.getString(offset + 2), // key
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // value
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.getLong(offset + 5) // actionParamId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ActionParam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActionId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setKey(cursor.getString(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setActionParamId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ActionParam entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ActionParam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "actionParams" to-many relationship of Action. */
    public List<ActionParam> _queryAction_ActionParams(long actionParamId) {
        synchronized (this) {
            if (action_ActionParamsQuery == null) {
                QueryBuilder<ActionParam> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ActionParamId.eq(null));
                action_ActionParamsQuery = queryBuilder.build();
            }
        }
        Query<ActionParam> query = action_ActionParamsQuery.forCurrentThread();
        query.setParameter(0, actionParamId);
        return query.list();
    }

}
