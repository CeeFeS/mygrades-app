package de.mygrades.database.dao;

import de.mygrades.database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "GRADE_ENTRY".
 */
public class GradeEntry {

    private Long id;
    /** Not-null value. */
    private String name;
    private Double grade;
    private String examId;
    /** Not-null value. */
    private String semester;
    private String state;
    private Long overviewId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GradeEntryDao myDao;

    private Overview overview;
    private Long overview__resolvedKey;


    public GradeEntry() {
    }

    public GradeEntry(Long id) {
        this.id = id;
    }

    public GradeEntry(Long id, String name, Double grade, String examId, String semester, String state, Long overviewId) {
        this.id = id;
        this.name = name;
        this.grade = grade;
        this.examId = examId;
        this.semester = semester;
        this.state = state;
        this.overviewId = overviewId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGradeEntryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Double getGrade() {
        return grade;
    }

    public void setGrade(Double grade) {
        this.grade = grade;
    }

    public String getExamId() {
        return examId;
    }

    public void setExamId(String examId) {
        this.examId = examId;
    }

    /** Not-null value. */
    public String getSemester() {
        return semester;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSemester(String semester) {
        this.semester = semester;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public Long getOverviewId() {
        return overviewId;
    }

    public void setOverviewId(Long overviewId) {
        this.overviewId = overviewId;
    }

    /** To-one relationship, resolved on first access. */
    public Overview getOverview() {
        Long __key = this.overviewId;
        if (overview__resolvedKey == null || !overview__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OverviewDao targetDao = daoSession.getOverviewDao();
            Overview overviewNew = targetDao.load(__key);
            synchronized (this) {
                overview = overviewNew;
            	overview__resolvedKey = __key;
            }
        }
        return overview;
    }

    public void setOverview(Overview overview) {
        synchronized (this) {
            this.overview = overview;
            overviewId = overview == null ? null : overview.getId();
            overview__resolvedKey = overviewId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
