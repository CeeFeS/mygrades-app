package de.mygrades.database.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.mygrades.database.dao.Rule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RULE".
*/
public class RuleDao extends AbstractDao<Rule, Long> {

    public static final String TABLENAME = "RULE";

    /**
     * Properties of entity Rule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UniversityId = new Property(1, long.class, "universityId", false, "UNIVERSITY_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property LastUpdated = new Property(3, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
        public final static Property RuleId = new Property(4, long.class, "ruleId", false, "RULE_ID");
    };

    private DaoSession daoSession;

    private Query<Rule> university_RulesQuery;

    public RuleDao(DaoConfig config) {
        super(config);
    }
    
    public RuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RULE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UNIVERSITY_ID\" INTEGER NOT NULL ," + // 1: universityId
                "\"TYPE\" TEXT NOT NULL ," + // 2: type
                "\"LAST_UPDATED\" INTEGER," + // 3: lastUpdated
                "\"RULE_ID\" INTEGER NOT NULL UNIQUE );"); // 4: ruleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RULE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUniversityId());
        stmt.bindString(3, entity.getType());
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(4, lastUpdated.getTime());
        }
        stmt.bindLong(5, entity.getRuleId());
    }

    @Override
    protected void attachEntity(Rule entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Rule readEntity(Cursor cursor, int offset) {
        Rule entity = new Rule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // universityId
            cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // lastUpdated
            cursor.getLong(offset + 4) // ruleId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUniversityId(cursor.getLong(offset + 1));
        entity.setType(cursor.getString(offset + 2));
        entity.setLastUpdated(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setRuleId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "rules" to-many relationship of University. */
    public List<Rule> _queryUniversity_Rules(long ruleId) {
        synchronized (this) {
            if (university_RulesQuery == null) {
                QueryBuilder<Rule> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RuleId.eq(null));
                university_RulesQuery = queryBuilder.build();
            }
        }
        Query<Rule> query = university_RulesQuery.forCurrentThread();
        query.setParameter(0, ruleId);
        return query.list();
    }

}
